// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200407133456_Add_Restaurant_Rating_Score")]
    partial class Add_Restaurant_Rating_Score
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Model.ApplicationAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionLevel")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ApplicationActions");
                });

            modelBuilder.Entity("DataAccess.Model.AuthenticationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpiryDurationTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUse")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("AuthenticationCodes");
                });

            modelBuilder.Entity("DataAccess.Model.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DataAccess.Model.CartRestaurantFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantFoodId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RestaurantFoodId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("CartRestaurantFoods");
                });

            modelBuilder.Entity("DataAccess.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityCode")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DataAccess.Model.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("HtmlBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("DataAccess.Model.EmailUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("EmailId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("EmailUsers");
                });

            modelBuilder.Entity("DataAccess.Model.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("DataAccess.Model.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultImageAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("FoodCategories");
                });

            modelBuilder.Entity("DataAccess.Model.FoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("FoodId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("FoodTypes");
                });

            modelBuilder.Entity("DataAccess.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("DiscountCodeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataAccess.Model.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("Quentity")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantFoodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RestaurantFoodId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DataAccess.Model.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("DataAccess.Model.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("AvaterImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryPhoneNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<float>("RateScore")
                        .HasColumnType("real");

                    b.Property<int>("RestaurantTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SecondryPhoneNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("ShowRate")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RestaurantTypeId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomizeFoodName")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("MakingTime")
                        .HasColumnType("time");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("FoodId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RestaurantFoods");
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantFoodComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsConfirmed")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RestaurantFoodComments");
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantFoodDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxUsage")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<float?>("Percentage")
                        .HasColumnType("real");

                    b.Property<int>("RestaurantFoodId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Usage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RestaurantFoodId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RestaurantFoodDiscounts");
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantFoodImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltText")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantFoodId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RestaurantFoodId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RestaurantFoodImages");
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantFoodRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantFoodId")
                        .HasColumnType("int");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RestaurantFoodId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RestaurantFoodReatings");
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RestaurantTypes");
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RestaurantUsers");
                });

            modelBuilder.Entity("DataAccess.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccess.Model.RoleAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RoleActions");
                });

            modelBuilder.Entity("DataAccess.Model.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeactivatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DataAccess.Model.Sms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Smses");
                });

            modelBuilder.Entity("DataAccess.Model.SmsUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("SmsId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("SmsId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("SmsUsers");
                });

            modelBuilder.Entity("DataAccess.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AccessFailedCount")
                        .HasColumnType("smallint");

                    b.Property<string>("AvatarImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockout")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhonenumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.Model.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("DataAccess.Model.UserDiscountCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<int?>("EndUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxUsage")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<float?>("Percentage")
                        .HasColumnType("real");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Usage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("EndUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("UserDiscountCodes");
                });

            modelBuilder.Entity("DataAccess.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DataAccess.Model.ApplicationAction", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("ApplicationActionsCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("ApplicationActionsDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("ApplicationActionsOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.ApplicationAction", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("ApplicationActionsUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.AuthenticationCode", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("AuthenticationCodeCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("AuthenticationCodeDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("AuthenticationCodeOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("AuthenticationCodeUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.Cart", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("CartCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("CartDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("CartOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("CartUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.CartRestaurantFood", b =>
                {
                    b.HasOne("DataAccess.Model.Cart", "Cart")
                        .WithMany("CartRestaurantFoods")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("CartRestaurantFoodCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("CartRestaurantFoodDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("CartRestaurantFoodOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.RestaurantFood", "RestaurantFood")
                        .WithMany("CartRestaurantFoods")
                        .HasForeignKey("RestaurantFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("CartRestaurantFoodUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.City", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("CityCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("CityDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("CityOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("CityUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.Email", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("EmailCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("EmailDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("EmailOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("EmailUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.EmailUser", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("EmailUserCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("EmailUserDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.Email", "Email")
                        .WithMany("EmailUsers")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("EmailUserOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("EmailUserUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.Food", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("FoodCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("FoodDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("FoodOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("FoodUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.FoodCategory", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("FoodCategoryCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("FoodCategoryDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("FoodCategoryOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("FoodCategoryUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.FoodType", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("FoodTypeCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("FoodTypeDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.FoodCategory", "FoodCategory")
                        .WithMany("FoodsTypes")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.Food", "Food")
                        .WithMany("FoodTypes")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("FoodTypeOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("FoodTypeUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.Order", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("OrderCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("OrderDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("OrderOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("OrderUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.OrderDetail", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("OrderDetailCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("OrderDetailDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("OrderDetailOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.RestaurantFood", "RestaurantFood")
                        .WithMany("OrderDetails")
                        .HasForeignKey("RestaurantFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("OrderDetailUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.Province", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("ProvinceCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("ProvinceDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("ProvinceOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("ProvinceUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.Restaurant", b =>
                {
                    b.HasOne("DataAccess.Model.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("RestaurantCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("RestaurantDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("RestaurantOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.RestaurantType", "RestaurantType")
                        .WithMany("Restaurants")
                        .HasForeignKey("RestaurantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("RestaurantUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantFood", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("RestaurantFoodCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("RestaurantFoodDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.Food", "Food")
                        .WithMany("RestaurantFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("RestaurantFoodOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.Restaurant", "Restaurant")
                        .WithMany("RestaurantFoods")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("RestaurantFoodUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantFoodComment", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("RestaurantFoodCommentCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("RestaurantFoodCommentDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("RestaurantFoodCommentOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.RestaurantFoodComment", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("RestaurantFoodCommentUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantFoodDiscount", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("RestaurantFoodDiscountCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("RestaurantFoodDiscountDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("RestaurantFoodDiscountOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.RestaurantFood", "RestaurantFood")
                        .WithMany("RestaurantFoodDiscounts")
                        .HasForeignKey("RestaurantFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("RestaurantFoodDiscountUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantFoodImage", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("RestaurantFoodImageCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("RestaurantFoodImageDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("RestaurantFoodImageOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.RestaurantFood", "RestaurantFood")
                        .WithMany("RestaurantFoodImages")
                        .HasForeignKey("RestaurantFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("RestaurantFoodImageUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantFoodRating", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("RestaurantFoodRatingCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("RestaurantFoodRatingDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("RestaurantFoodRatingOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.RestaurantFood", "RestaurantFood")
                        .WithMany("RestaurantFoodRatings")
                        .HasForeignKey("RestaurantFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("RestaurantFoodRatingUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantType", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("RestaurantTypeCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("RestaurantTypeDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("RestaurantTypeOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("RestaurantTypeUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.RestaurantUser", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("RestaurantUserCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("RestaurantUserDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("RestaurantUserOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.Restaurant", "Restaurant")
                        .WithMany("RestaurantUsers")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("RestaurantUserUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.Role", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("RoleCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("RoleDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("RoleOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("RoleUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.RoleAction", b =>
                {
                    b.HasOne("DataAccess.Model.ApplicationAction", "Action")
                        .WithMany("RoleActions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("RoleActionCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("RoleActionDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("RoleActionOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.Role", "Role")
                        .WithMany("RoleActions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("RoleActionUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.Sms", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("SmsCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("SmsDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("SmsOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("SmsUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.SmsUser", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("SmsUserCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("SmsUserDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("SmsUserOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.Sms", "Sms")
                        .WithMany("SmsUsers")
                        .HasForeignKey("SmsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("SmsUserUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.User", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("UserCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("UserDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("UserOwner")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("UserUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.UserAddress", b =>
                {
                    b.HasOne("DataAccess.Model.City", "City")
                        .WithMany("UserAddresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("UserAddressCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("UserAddressDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("UserAddressOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("UserAddressUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.UserDiscountCode", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("UserDiscountCodeCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("UserDiscountCodeDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "EndUser")
                        .WithMany("UserDiscountCodes")
                        .HasForeignKey("EndUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("UserDiscountCodeOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("UserDiscountCodeUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Model.UserRole", b =>
                {
                    b.HasOne("DataAccess.Model.User", "CreatedByUser")
                        .WithMany("UserRoleCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "DeletedByUser")
                        .WithMany("UserRoleDeletedBy")
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "OwnerUser")
                        .WithMany("UserRoleOwnerUser")
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("DataAccess.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "UpdatedByUser")
                        .WithMany("UserRoleUpdatedBy")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
